@using CarRepairReport.Extensions
@model CarRepairReport.Models.ViewModels.Commons.HomeVm

@{
    ViewBag.Title = "Car Repair Report";
}

@*<div class="jumbotron">
        <h1>ASP.NET</h1>
        <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
        <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
    </div>*@

<div class="commercial-banner">
    <p></p>

</div>

<div class="container">
    <div class="row">

        <div class="col-md-3 crr-box site-color">

            @if (this.User.Identity.IsAuthenticated)
            {
                <div class="row">
                    <div class="col col-xs-12 aside-home-left">

                        @using (Ajax.BeginForm("Cost", "Cost", null,
                    new AjaxOptions()
                    {
                        HttpMethod = "POST",
                        Confirm = "Are you sure you want to add this cost?",
                        OnSuccess = "resetInvestmentForm",
                        //OnComplete = "resetInvestmentForm",
                        OnFailure = "onError"
                    }, new { id = "investment-form" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-group">
                                <div class="col-md-10 text-muted">
                                    <div class="form-group flex">
                                        <div class="col-md-11 margin-top">
                                            <span>New Invest</span>
                                        </div>
                                        <div class="col-md-1 margin-top">
                                            <button onclick="changeIcon('#plus-minus-invest')" type="button" data-toggle="collapse" data-target="#cost-form"><span id="plus-minus-invest" class="glyphicon glyphicon-plus"></span></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="cost-form" class="collapse">

                                <div class="form-group margin-me">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.CarId)
                                        @Html.DropDownListFor(x => Model.InvestPart.CarId, Model.InvestPart.CarNames.Select(x => new SelectListItem() { Text = x.Value, Value = x.Key.ToString() }), new { @class = "limit-dropdown-width", id = "car-dropdown-home" })
                                        <br />
                                        @Html.ValidationMessageFor(model => model.InvestPart.CarId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.Name, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.Name, new { htmlAttributes = new { @class = "form-group" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.Price, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.Price, new { htmlAttributes = new { @class = "form-group", @data_val = "false" } })
                                    </div>
                                </div>

                                <div class="form-group margin-top">
                                    <div class="col-md-10 text-muted">
                                        <div class="form-group">
                                            <div class="col-md-11 hr margin-top">
                                                New Part
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.SerialNumber, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.SerialNumber, new { htmlAttributes = new { @class = "form-group" } })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.PartName, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.PartName, new { htmlAttributes = new { @class = "form-group" } })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.PartPrice, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.PartPrice, new { htmlAttributes = new { @class = "form-group", @data_val = "false" } })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.Quantity, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.Quantity, new { htmlAttributes = new { @class = "form-group", @data_val = "false" } })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.ManufacturerName, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.ManufacturerName, new { htmlAttributes = new { @class = "form-group" } })
                                    </div>
                                </div>

                                <div class="form-group margin-top">
                                    <div class="col-md-10 text-muted">
                                        <div class="form-group">
                                            <div class="col-md-11 hr margin-top">
                                                Car Running Distance
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @*<div class="col-md-10">
                                            @Html.LabelFor(x => x.InvestPart.DistanceTraveled, htmlAttributes: new { @class = "form-group" })
                                            @Html.EditorFor(x => x.InvestPart.DistanceTraveled, new { htmlAttributes = new { @class = "form-group", @data_val = "false" } })
                                        </div>*@
                                </div>
                                <div class="form-group">

                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.MountedOnKm, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.MountedOnKm, new { htmlAttributes = new { @class = "form-group", @data_val = "false" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.MountedOnMi, htmlAttributes: new { @class = "form-group" })
                                        @Html.EditorFor(x => x.InvestPart.MountedOnMi, new { htmlAttributes = new { @class = "form-group", @data_val = "false" } })
                                    </div>
                                </div>

                                <div class="form-group margin-top">
                                    <div class="col-md-10 text-muted">
                                        <div class="form-group">
                                            <div class="col-md-11 hr margin-top">
                                                Serviced By
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group margin-me">
                                    <div class="col-md-10">
                                        @Html.LabelFor(x => x.InvestPart.VehicleService)
                                        @Html.DropDownListFor(x => Model.InvestPart.VehicleService, Model.InvestPart.VehicleServices.Select(x => new SelectListItem() { Text = x.ToCapital(), Value = x }), new { id = "service-dropdown-home" })
                                    </div>
                                </div>

                                <div class="form-group margin-me">
                                    <div class="col-md-10">
                                        <input type="submit" value="Add" class="btn btn-sm btn-default" />
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="row crr-box bg-white">
                    <div class="col col-sm-12">
                        Commercial Banner
                    </div>
                </div>
            }



        </div>

        <div class="col col-md-6">

            @Html.Action("GetLastServicedParts", "Car")

        </div>

        <div class="col-md-3 site-color crr-box aside-home-right">
            <div class="vehicle-services">

                <div class="text-center">
                    @Html.ActionLink("Car Services", "GetAllVehicleServiceShortInfo", "VehicleService")
                </div>

                @Html.Action("TopVehicleServices", "VehicleService")
            </div>

            <div class="manufacturers-short-info">
                <div class="text-center">
                    @Html.ActionLink("Manufacturers", "Manufacturers", "Manufacturer")
                </div>

                @Html.Action("GetTopManufacturers", "Manufacturer")
            </div>
        </div>

    </div>
</div>

<button id="modal-btn-trigger" type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal-input-custom" style="display: none;">Open Modal</button>

<!-- Modal -->
<div id="myModal-input-custom" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                @*<h4 class="modal-title">Modal Header</h4>*@
            </div>
            <div class="modal-body">
                <p id="modal-input">Some text in the modal.</p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<script type="text/javascript">

    function changeIcon(id) {

        var element = $(id)[0];

        var hasPlus = $(id).hasClass('glyphicon-plus');

        if (hasPlus) {
            element.className = element.className.replace(' glyphicon-plus', ' glyphicon-minus');
        } else {
            element.className = element.className.replace(' glyphicon-minus', ' glyphicon-plus');
        }
    }

    function resetInvestmentForm(result) {
        // responseJSON
        console.log(result);
        //console.log(result.responseJSON);

        var resultMessage = "";

        if (result.InvestMessage != null) {
            resultMessage = resultMessage + result.InvestMessage + "\r\n";
        }

        if (result.NewPartMessage != null) {
            resultMessage = resultMessage + result.NewPartMessage + "\r\n";
        }

        if (result.ErrorMessage != null) {
            resultMessage = resultMessage + result.ErrorMessage + "\r\n";
        }

        //alert(resultMessage);
        $('#modal-input')[0].innerText = resultMessage;
        $('#modal-btn-trigger')[0].click();

        //$('.custom-close-modal')[0].click();
        //var langModel = document.getElementById('membership-invites-content');
        //langModel.style.display = "none";

        $('.modal-backdrop')[0].style.zIndex = 0;

        //$('#investment-form').reset();

        $('#car-dropdown-home')[0].selectedIndex = 0;
        $('#service-dropdown-home')[0].selectedIndex = 0;

        var formInputs = $('#investment-form input');

        for (var i = 1; i < formInputs.length - 1; i++) {

            var defaultValue = formInputs[i].defaultValue;
            formInputs[i].value = defaultValue;
        }

    }

    function onError(result) {
        //console.log('error');

        var resultMessage = "";

        if (result.InvestMessage != null) {
            resultMessage = resultMessage + result.InvestMessage + "\r\n";
        }

        if (result.NewPartMessage != null) {
            resultMessage = resultMessage + result.NewPartMessage + "\r\n";
        }

        if (result.ErrorMessage != null) {
            resultMessage = resultMessage + result.ErrorMessage + "\r\n";
        }

        alert(resultMessage);
    }

</script>